.TH "scheduleFunctions.views" 3 "Version 3" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scheduleFunctions.views
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBlogin\fP (request)"
.br
.ti -1c
.RI "\fBdashboard_view\fP (request)"
.br
.ti -1c
.RI "\fBschedule_view\fP (request)"
.br
.ti -1c
.RI "\fBrun_script\fP (request)"
.br
.ti -1c
.RI "dict \fBget_section_details\fP (str course, int section)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "list \fBexample_course_list\fP"
.br
.ti -1c
.RI "list \fBexample_conflict_list\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "scheduleFunctions\&.views\&.dashboard_view ( request)"

.PP
Definition at line \fB33\fP of file \fBviews\&.py\fP\&.
.nf
33 def dashboard_view(request):
34     if "username" not in request\&.session:
35         return redirect("home")  # Redirect to login if not authenticated
36 
37     # Render the dashboard\&.html template
38     return render(request, "dashboard\&.html", {"username": request\&.session["username"]})
39 
40 """
41 <li>CSCI 1620 \- Introduction to CS (Mon/Wed 10:00AM \- 11:30AM)</li>
42 <li>MATH 1950 \- Calculus I (Tue/Thu 1:00PM \- 2:30PM)</li>
43 <li>MATH 2040 \- Discrete Math (Mon/Wed 3:00PM \- 4:15PM)</li>
44 <li>GEOG 1010 \- Geology (Mon/Wed 3:00PM \- 4:15PM)</li>
45 """
.PP
.fi

.SS " dict scheduleFunctions\&.views\&.get_section_details (str course, int section)"

.PP
.nf
Returns a dictionary detailing all the relevant information for the section that is requested\&.

Args:
    course (str): identifier for the course that the section is part of\&. i\&.e\&. csci2500
    section (int): number for the section

Returns:
    dict: All of the information relevant to the section\&.
        'course': str
        'section': int
        'start': int
        'end': int
        'days': list[str]
        'course_name': str
        'desc': str
        'professor': str
        'location': str
        'prerequisites': list[str]
        'cocurrent_classes': list[dict]
            'course': str
            'section': str
            'course_name': str
            'start': int
            'end': int
            'days': list[str]

.fi
.PP
 
.PP
Definition at line \fB107\fP of file \fBviews\&.py\fP\&.
.nf
107 def get_section_details(course: str, section: int) \-> dict:
108     """Returns a dictionary detailing all the relevant information for the section that is requested\&.
109 
110     Args:
111         course (str): identifier for the course that the section is part of\&. i\&.e\&. csci2500
112         section (int): number for the section
113 
114     Returns:
115         dict: All of the information relevant to the section\&.
116             'course': str
117             'section': int
118             'start': int
119             'end': int
120             'days': list[str]
121             'course_name': str
122             'desc': str
123             'professor': str
124             'location': str
125             'prerequisites': list[str]
126             'cocurrent_classes': list[dict]
127                 'course': str
128                 'section': str
129                 'course_name': str
130                 'start': int
131                 'end': int
132                 'days': list[str]
133             
134     """
135     \&.\&.\&.
.PP
.fi

.SS "scheduleFunctions\&.views\&.login ( request)"

.PP
Definition at line \fB8\fP of file \fBviews\&.py\fP\&.
.nf
8 def login(request):
9     if request\&.method == "POST":
10         username = request\&.POST\&.get("username")
11         password = request\&.POST\&.get("password")
12 
13         # Get the absolute path to users\&.txt
14         current_dir = os\&.path\&.dirname(os\&.path\&.abspath(__file__))
15         users_file_path = os\&.path\&.join(current_dir, "users\&.txt")
16 
17         try:
18             # Read users\&.txt
19             with open(users_file_path, "r") as file:
20                 users = [line\&.strip()\&.split(",") for line in file\&.readlines()]
21 
22             # Authenticate user
23             if [username, password] in users:
24                 request\&.session["username"] = username  # Store session
25                 return redirect("dashboard")  # Redirect to dashboard
26 
27             return HttpResponse("Invalid credentials", status=401)
28         except FileNotFoundError:
29             return HttpResponse("Error: users\&.txt file not found\&.", status=500)
30 
31     return render(request, "login\&.html")  # Render login form (login\&.html template)
32 
.PP
.fi

.SS "scheduleFunctions\&.views\&.run_script ( request)"

.PP
Definition at line \fB96\fP of file \fBviews\&.py\fP\&.
.nf
96 def run_script(request):
97     script_name = request\&.GET\&.get("script")
98     script_path = os\&.path\&.join(settings\&.BASE_DIR, f"{script_name}\&.py")  # Locate scripts in the root directory
99 
100     if os\&.path\&.exists(script_path):
101         result = subprocess\&.run(["python", script_path], capture_output=True, text=True)
102         return JsonResponse({"output": result\&.stdout, "error": result\&.stderr})
103     else:
104         return JsonResponse({"error": "Invalid script name"}, status=400)
105 
106 
.PP
.fi

.SS "scheduleFunctions\&.views\&.schedule_view ( request)"

.PP
Definition at line \fB85\fP of file \fBviews\&.py\fP\&.
.nf
85 def schedule_view(request):
86     # if "username" not in request\&.session:
87     #     return redirect("home")  # Redirect to login if not authenticated
88 
89     selected_course = request\&.GET\&.get('course', None) 
90     selected_section =request\&.GET\&.get('section', None) 
91     if selected_course and selected_section:
92         return render(request, "section_details\&.html", {"username": request\&.session["username"], "details": get_section_details(selected_course, selected_section)})
93     # Render the dashboard\&.html template
94     return render(request, "schedule\&.html", {"username": request\&.session["username"], "course_list": example_course_list, "conflict_list": example_conflict_list})
95 
.PP
.fi

.SH "Variable Documentation"
.PP 
.SS "list scheduleFunctions\&.views\&.example_conflict_list"
\fBInitial value:\fP
.nf
1 =  [
2     ["MATH 2040", "GEOG 101"],
3 ]
.PP
.fi

.PP
Definition at line \fB81\fP of file \fBviews\&.py\fP\&.
.SS "list scheduleFunctions\&.views\&.example_course_list"

.PP
Definition at line \fB46\fP of file \fBviews\&.py\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
