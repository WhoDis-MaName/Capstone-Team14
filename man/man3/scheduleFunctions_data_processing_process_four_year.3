.TH "scheduleFunctions.data_processing.process_four_year" 3 "Version 0.5" "Capstone Team 14" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scheduleFunctions.data_processing.process_four_year
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "list[dict] \fBget_plan\fP (str \fBfilename\fP)"
.br
.RI "Read the four year plan from a file and confirm that it is a list\&. "
.ti -1c
.RI "list \fBget_semester\fP (list[dict] plan, str|int year, str semester)"
.br
.RI "Get the list of classes for a particular semester from the four year plan, assuming that there may be multiple plans given\&. "
.ti -1c
.RI "dict \fBset_contsraints\fP (list semester_plan, int semester_id)"
.br
.RI "Process the semester such that classes listed as fulfilling the same requirement are soft constraints and all other classes in the semester are hard constraints\&. "
.ti -1c
.RI "dict \fBcombine_constraints\fP (list[dict] \fBconstraints\fP)"
.br
.RI "Combine the constraints so that the keys are based on the course and not based on the semester\&. "
.ti -1c
.RI "dict \fBcreate_constraints\fP (str \fBfilename\fP)"
.br
.RI "Take a four year plan stored in a JSON file and process it so that it can be stored as JSON or as clingo in the desired format\&. "
.ti -1c
.RI "None \fBconvert_asp\fP (dict \fBconstraints\fP, str file)"
.br
.RI "Take formated constraints and convert it into asp rules In addition to the rules defined by the constraints parameter, the rules file is also appended with equivalence rules\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBcurrent_directory\fP = os\&.path\&.dirname(os\&.path\&.realpath(__file__))"
.br
.ti -1c
.RI "\fBpath\fP = current_directory\&.split(os\&.sep)"
.br
.ti -1c
.RI "\fBroot_index\fP = path\&.index('Capstone\-Team14')"
.br
.ti -1c
.RI "\fBroot_dir\fP = os\&.sep\&.join(\fBpath\fP[:\fBroot_index\fP+1])"
.br
.ti -1c
.RI "\fBdata_dir\fP = os\&.path\&.join(\fBroot_dir\fP, 'data_files', 'four_year_plan')"
.br
.ti -1c
.RI "\fBfilename\fP = os\&.path\&.join(\fBdata_dir\fP, 'fourYearPlan\&.json')"
.br
.ti -1c
.RI "dict \fBconstraints\fP = \fBcreate_constraints\fP(\fBfilename\fP)"
.br
.ti -1c
.RI "\fBjson_file\fP = os\&.path\&.join(\fBdata_dir\fP, 'four_year_plan\&.json')"
.br
.ti -1c
.RI "\fBasp_file\fP = os\&.path\&.join(\fBdata_dir\fP, 'four_year_plan_constraints\&.lp')"
.br
.ti -1c
.RI "\fBf\fP"
.br
.ti -1c
.RI "\fBindent\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS " dict scheduleFunctions\&.data_processing\&.process_four_year\&.combine_constraints (list[dict] constraints)"

.PP
Combine the constraints so that the keys are based on the course and not based on the semester\&. 
.PP
\fBParameters\fP
.RS 4
\fIconstraints\fP A list where each item in the list represents the classes in a semester 
.RE
.PP
\fBReturns\fP
.RS 4
A dictionary whose keys are all of the classes described in the four year plan 
.RE
.PP

.PP
Definition at line \fB144\fP of file \fBprocess_four_year\&.py\fP\&.
.SS " None scheduleFunctions\&.data_processing\&.process_four_year\&.convert_asp (dict constraints, str file)"

.PP
Take formated constraints and convert it into asp rules In addition to the rules defined by the constraints parameter, the rules file is also appended with equivalence rules\&. $ a \equiv c \Leftarrow a \equiv b, b \equiv c $ $ b \in S \Leftarrow a \in S, a \equiv b $
.IP "\(bu" 2
etc\&.
.PP

.PP
\fBParameters\fP
.RS 4
\fIconstraints\fP 
.br
\fIfile\fP A string that contains the file path and filename that the JSON will be written to\&.

.PP
\fINOTE\fP to maintain the script's OS agnostic nature, it is suggested to utilize os\&.path\&.join() to join strings or os\&.sep\&.join() to join elements of a list 
.RE
.PP

.PP
Definition at line \fB207\fP of file \fBprocess_four_year\&.py\fP\&.
.SS " dict scheduleFunctions\&.data_processing\&.process_four_year\&.create_constraints (str filename)"

.PP
Take a four year plan stored in a JSON file and process it so that it can be stored as JSON or as clingo in the desired format\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP A string that contains the file path and filename that the JSON will be written to\&.

.PP
\fINOTE\fP to maintain the script's OS agnostic nature, it is suggested to utilize os\&.path\&.join() to join strings or os\&.sep\&.join() to join elements of a list 
.RE
.PP
\fBReturns\fP
.RS 4
A dictionary whose keys are all of the courses in the four year plan 
.RE
.PP

.PP
Definition at line \fB168\fP of file \fBprocess_four_year\&.py\fP\&.
.SS " list[dict] scheduleFunctions\&.data_processing\&.process_four_year\&.get_plan (str filename)"

.PP
Read the four year plan from a file and confirm that it is a list\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP A string that contains the file path and filename that the JSON will be written to\&.

.PP
\fINOTE\fP to maintain the script's OS agnostic nature, it is suggested to utilize os\&.path\&.join() to join strings or os\&.sep\&.join() to join elements of a list 
.RE
.PP
\fBReturns\fP
.RS 4
The list of dictionaries that was read from the file\&. 
.RE
.PP

.PP
Definition at line \fB19\fP of file \fBprocess_four_year\&.py\fP\&.
.SS " list scheduleFunctions\&.data_processing\&.process_four_year\&.get_semester (list[dict] plan, str|int year, str  semester)"

.PP
Get the list of classes for a particular semester from the four year plan, assuming that there may be multiple plans given\&. 
.PP
\fBParameters\fP
.RS 4
\fIplan\fP A list of dictionaries\&. Each dictionary defines a four year plan such that it has this structure

.PP
{ 'year':{ 'semsester':[ [ list of class numbers], [ list of class names], number of credits filled by the class(es) in the list ] \&.\&.\&. } \&.\&.\&. 
.br
 }

.PP
.RE
.PP

.PP
\fBParameters\fP
.RS 4
\fIyear\fP A string or an integer to identify the year in the plan that is to be read from\&. Options: ['First Year', 'Second Year', 'Third Year', 'Fourth Year'] or [1, 2, 3, 4] 
.RE
.PP

.PP
\fBParameters\fP
.RS 4
\fIsemester\fP A string that determines if fall semester or spring semester Options: ['FALL', 'SPRING'] or any variation in capitalization 
.RE
.PP

.PP
\fBReturns\fP
.RS 4
A list of classes in the same structure as origional semester list combined for all plans in the origional list\&. 
.RE
.PP

.PP
Definition at line \fB66\fP of file \fBprocess_four_year\&.py\fP\&.
.SS " dict scheduleFunctions\&.data_processing\&.process_four_year\&.set_contsraints (list semester_plan, int semester_id)"

.PP
Process the semester such that classes listed as fulfilling the same requirement are soft constraints and all other classes in the semester are hard constraints\&. 
.PP
\fBParameters\fP
.RS 4
\fIsemester_plan\fP list of classes in the same semester in the same structure as the origional four year plan
.RE
.PP
\fBReturns\fP
.RS 4
Dictionary containing all of the classes in the semester Structure: <course number like csci2040>: { 'equivalent_courses': set, 'same_semester': set, 'credits': int, 'semsesters': set } \&.\&.\&. 
.RE
.PP

.PP
Definition at line \fB113\fP of file \fBprocess_four_year\&.py\fP\&.
.SH "Variable Documentation"
.PP 
.SS "scheduleFunctions\&.data_processing\&.process_four_year\&.asp_file = os\&.path\&.join(\fBdata_dir\fP, 'four_year_plan_constraints\&.lp')"

.PP
Definition at line \fB242\fP of file \fBprocess_four_year\&.py\fP\&.
.SS "scheduleFunctions\&.data_processing\&.process_four_year\&.constraints = \fBcreate_constraints\fP(\fBfilename\fP)"

.PP
Definition at line \fB240\fP of file \fBprocess_four_year\&.py\fP\&.
.SS "scheduleFunctions\&.data_processing\&.process_four_year\&.current_directory = os\&.path\&.dirname(os\&.path\&.realpath(__file__))"

.PP
Definition at line \fB229\fP of file \fBprocess_four_year\&.py\fP\&.
.SS "scheduleFunctions\&.data_processing\&.process_four_year\&.data_dir = os\&.path\&.join(\fBroot_dir\fP, 'data_files', 'four_year_plan')"

.PP
Definition at line \fB238\fP of file \fBprocess_four_year\&.py\fP\&.
.SS "scheduleFunctions\&.data_processing\&.process_four_year\&.f"

.PP
Definition at line \fB245\fP of file \fBprocess_four_year\&.py\fP\&.
.SS "scheduleFunctions\&.data_processing\&.process_four_year\&.filename = os\&.path\&.join(\fBdata_dir\fP, 'fourYearPlan\&.json')"

.PP
Definition at line \fB239\fP of file \fBprocess_four_year\&.py\fP\&.
.SS "scheduleFunctions\&.data_processing\&.process_four_year\&.indent"

.PP
Definition at line \fB245\fP of file \fBprocess_four_year\&.py\fP\&.
.SS "scheduleFunctions\&.data_processing\&.process_four_year\&.json_file = os\&.path\&.join(\fBdata_dir\fP, 'four_year_plan\&.json')"

.PP
Definition at line \fB241\fP of file \fBprocess_four_year\&.py\fP\&.
.SS "scheduleFunctions\&.data_processing\&.process_four_year\&.path = current_directory\&.split(os\&.sep)"

.PP
Definition at line \fB234\fP of file \fBprocess_four_year\&.py\fP\&.
.SS "scheduleFunctions\&.data_processing\&.process_four_year\&.root_dir = os\&.sep\&.join(\fBpath\fP[:\fBroot_index\fP+1])"

.PP
Definition at line \fB237\fP of file \fBprocess_four_year\&.py\fP\&.
.SS "scheduleFunctions\&.data_processing\&.process_four_year\&.root_index = path\&.index('Capstone\-Team14')"

.PP
Definition at line \fB236\fP of file \fBprocess_four_year\&.py\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Capstone Team 14 from the source code\&.
